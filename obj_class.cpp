/**
 * @Author: ruo_van
 * @Date:   2019-02-26T09:30:28+08:00
 * @Email:  wanwb1224@gmail.com
 * @Last modified by:   ruo_van
 * @Last modified time: 2019-02-26T09:30:28+08:00
 */

// 类型是什么？
// 总之，指定基本类型完成了三项工作：
// 1. 决定了数据对象需要的内存数量；
// 2. 决定如何解释内存中的位(long和float在内存中占用的位数相同，但将他们转换为数值的方法不同)
// 3. 决定可使用数据对象执行的操作或方法

// 类是什么
// 类是一种将抽象转换为用户定义类型的C++工具，它将数据表示和操纵数据的方法组合成一个整洁的包
// 类的规范有两部分组成，类声明和类方法，类声明提供了类的蓝图，而方法定义则提供了细节

// 接口是一个共享框架，供两个系统(如计算机和打印机之间或用户或计算机程序之间),交互时使用；

// 编写类： 将接口(类定义)放在头文件中，并将实现(类方法的代码)放在源代码文件中。

// 类的设计原则：
// 类设计尽可能将公有接口与实现细节分开。公有接口表示设计的抽象组件。
// 将实现细节放在一起并将他们与抽象分开被称为封装。
// 数据隐藏(将数据放在类的私有部分中)是一种封装，将实现的细节隐藏在私有部分中
// 封装的另一个例子是，将类函数定义和类声明放在不同文件中。

// 公有还是私有？
// 数据项一般放在私有部分，组成类接口的成员函数放在放在公有部分；也可以把成员函数放在私有部分中。
// 通常使用私有成员函数来处理不属于公有接口的实现细节

// 不必在类声明中使用关键字private，因为这是类对象的默认访问控制

// 构造函数和析构函数

// C++ 为了让使用类对象就像使用标准类型一样(比如初始化)。
// 构造函数就是为了自动初始化用的
// 析构函数是完成清理工作的

// this 指针
// const Stock & topval(const Stock &s) const; 最后面const表示不会修改被隐式访问的对象
//

// 类的作用域

// 作用域内枚举
// enum class egg {Small, Medium, Large, Jumbo}
// enum class t_shirt {Small, Medium, Large, Jumbo}

// 抽象数据类型
